
The chorus lapilli game is built upon the tic-tac-toe game. 
To begin, since the game requires the player to move its pieces instead of placing down pieces after 
the third move, we can spilt the game into two different phases: placement phase and movement phase. 
To determine what phase of the game we are in, 

	const [placementCounts, setPlacementCounts] = useState({ X:0, O; 0 }); 

As the game progresses, we can update the placementCounts, and if X or O is greater than 3, then we can 
classify the game into the movement phase. Prior to that, the game is essentially tic-tac-toe. 

When the game enters the movement phase, we would need to select a particular piece on the board, and then 
move that piece to a valid square. To handle this, 

	const [selectedSquare, setSelectedSquare] = useState(null); 

When a square is selected in the movement phase, we first check if a square is already selected, if selected 
we need to check if the square contains the right piece. Otherwise, a square is already selected, so we need 
to check the new destination is empty and considered adjacent. But even before that, we need to consider the case 
that the center piece is occupied. We want to make sure that the next move either leads to a win or vacates the 
center square. 

At this stage of the code, we make sure that the selected square contains the player's piece and the next square
clicked is empty. 

Pseudocode: 
	if center:
		if center square is selected: 
			if new move wins:
				update game 
			else: 
				vacate from center
		else: (we need to check if moving a piece can lead to a win, this allows us to not move the center)
			if can win: 
				move piece, update game 
			else:
				invalid move, return 

This ensures that the logic of the of game is correct and fits the description of the game. To continue, without 
the center piece restriction, just move the selected piece to selected destination. 

To actively displayed the status message throughout the game, use ? : to determine 'X' or 'O'. 
A function calculateWinner is created, the function contains a list of lists, with each list containing a way the 
player can win. This function is used to determine if a particular board position is a win. 

The game ends effectively when someone wins, this is done by returning from the handleClick() when a winner 
exists already. 

$ npm pack --dry-run
npm notice
npm notice ðŸ“¦  react.dev@0.0.0
npm notice Tarball Contents
npm notice 610B package.json
npm notice 228B public/index.html
npm notice 9.9kB src/App.js
npm notice 794B src/Board.css
npm notice 267B src/index.js
npm notice 1.2kB src/styles.css
npm notice 12.1kB src/test_chorus_lapilli.py
npm notice Tarball Details
npm notice name: react.dev
npm notice version: 0.0.0
npm notice filename: react.dev-0.0.0.tgz
npm notice package size: 6.6 kB
npm notice unpacked size: 25.2 kB
npm notice shasum: 657e5b480aeeb1fcf457f5c27417c17f92f6f867
npm notice integrity: sha512-Z6h8L/3MDJdX2[...]lBRmN4pQNxgfA==
npm notice total files: 7
npm notice
react.dev-0.0.0.tgz
